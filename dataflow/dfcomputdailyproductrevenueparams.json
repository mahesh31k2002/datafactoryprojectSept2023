{
	"name": "dfcomputdailyproductrevenueparams",
	"properties": {
		"folder": {
			"name": "Practice"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "OrdersCSV",
						"type": "DatasetReference"
					},
					"name": "ordercscsv"
				},
				{
					"dataset": {
						"referenceName": "OrderItemsCSV",
						"type": "DatasetReference"
					},
					"name": "orderitemscsv"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dailyproductrevenuemonthlyparquet",
						"type": "DatasetReference"
					},
					"name": "dailyproductrevsinktoparquet"
				}
			],
			"transformations": [
				{
					"name": "orderstatusfilter"
				},
				{
					"name": "orderjoinorderitems"
				},
				{
					"name": "aggbyprodctanddate"
				}
			],
			"scriptLines": [
				"parameters{",
				"     order_month as string ('201401')",
				"}",
				"source(output(",
				"          order_id as integer,",
				"          order_date as timestamp,",
				"          order_customer_id as integer,",
				"          order_status as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ordercscsv",
				"source(output(",
				"          order_item_id as integer,",
				"          order_item_order_id as integer,",
				"          order_item_product_id as integer,",
				"          order_item_quantity as integer,",
				"          order_item_subtotal as double,",
				"          order_item_product_price as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> orderitemscsv",
				"ordercscsv filter(in(['COMPLETE','CLOSED'],order_status) && toString(toDate(order_date),'yyyyMM') == $order_month) ~> orderstatusfilter",
				"orderstatusfilter, orderitemscsv join(order_id == order_item_order_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> orderjoinorderitems",
				"orderjoinorderitems aggregate(groupBy(order_item_product_id,",
				"          order_date),",
				"     revenue = round(sum(order_item_subtotal),2)) ~> aggbyprodctanddate",
				"aggbyprodctanddate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> dailyproductrevsinktoparquet"
			]
		}
	}
}